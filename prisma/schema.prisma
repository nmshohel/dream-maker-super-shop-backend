generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  name            String
  email           String            @unique
  password        String
  role            UserRole
  contactNo       String
  profileImg      String?
  reviewAndRating ReviewAndRating[]
  Order           Order[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  address         Address?
  shippingAddress ShippingAddress?

  @@map("users")
}

model Address {
  id                  String    @id @default(uuid())
  userEmail           String?   @unique
  users               User?     @relation(fields: [userEmail], references: [email])
  divisionId          String? //division
  divisions           Division? @relation(fields: [divisionId], references: [id])
  thanaId             String?
  thanas              Thana?    @relation(fields: [thanaId], references: [id])
  districtId          String?
  districts           District? @relation(fields: [districtId], references: [id])
  houseBuildingStreet String?
  postCode            String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@map("addresses")
}

model ShippingAddress {
  id                  String    @id @default(uuid())
  userEmail           String?   @unique
  users               User?     @relation(fields: [userEmail], references: [email])
  divisionId          String? //division
  divisions           Division? @relation(fields: [divisionId], references: [id])
  thanaId             String?
  thanas              Thana?    @relation(fields: [thanaId], references: [id])
  districtId          String?
  districts           District? @relation(fields: [districtId], references: [id])
  houseBuildingStreet String?
  postCode            String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@map("shipping_addresses")
}

model Division {
  id              String            @id @default(uuid())
  title           String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  districts       District[]
  shippingAddress ShippingAddress[]
  address         Address[]
  Orders          Order[]

  @@map("division")
}

model District {
  id                String            @id @default(uuid())
  title             String
  divisionId        String
  division          Division          @relation(fields: [divisionId], references: [id])
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  thanas            Thana[]
  addresses         Address[]
  shippingAddresses ShippingAddress[]
  orders            Order[]

  @@map("district")
}

model Thana {
  id                String            @id @default(uuid())
  title             String
  districtId        String
  district          District          @relation(fields: [districtId], references: [id])
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  addresses         Address[]
  shippingAddresses ShippingAddress[]
  orders            Order[]

  @@map("thana")
}

model ProductType {
  id        String     @id @default(uuid())
  title     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  categorys Category[]
  products  Product[]

  @@map("product_type")
}

model Category {
  id            String        @id @default(uuid())
  title         String
  productTypeId String
  productType   ProductType   @relation(fields: [productTypeId], references: [id])
  products      Product[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  subCategorys  SubCategory[]

  @@map("categories")
}

model SubCategory {
  id         String    @id @default(uuid())
  title      String
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id])
  products   Product[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("sub_categories")
}

model Brand {
  id        String    @id @default(uuid())
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("brand")
}

model Product {
  id              String            @id @default(uuid())
  name            String?
  price           String
  discount        String?
  description     String?
  brandId         String?
  brand           Brand?            @relation(fields: [brandId], references: [id])
  warranty        String?
  productCode     String?
  quantity        String
  thumbImage      String[]
  images          String[]
  slug            String
  rate            String
  reviewCount     String?
  new             Boolean           @default(true)
  productTypeId   String
  productType     ProductType       @relation(fields: [productTypeId], references: [id])
  subCategoryId   String
  subCategorys    SubCategory       @relation(fields: [subCategoryId], references: [id])
  categoryId      String
  categorys       Category          @relation(fields: [categoryId], references: [id])
  supplierId      String
  supplier        Supplier          @relation(fields: [supplierId], references: [id])
  ReviewAndRating ReviewAndRating[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  orderedProducts OrderedProduct[]

  @@map("products")
}

model ReviewAndRating {
  id        String   @id @default(uuid())
  review    String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("review")
}

model Order {
  id                  String           @id @default(uuid())
  orderId             String?          @unique
  userEmail           String
  user                User             @relation(fields: [userEmail], references: [email])
  status              Status           @default(pending)
  orderType           OrderType        @default(cashOnDelivery)
  totalPrice          String
  totaldiscount       String
  divisionId          String?
  division            Division?        @relation(fields: [divisionId], references: [id])
  districtId          String?
  district            District?        @relation(fields: [districtId], references: [id])
  thanaId             String?
  thana               Thana?           @relation(fields: [thanaId], references: [id])
  postCode            String?
  houseBuildingStreet String?
  contactNo           String?
  name                String?
  OrderedProduct      OrderedProduct[]
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  @@map("orders")
}

model OrderedProduct {
  id        String   @id @default(uuid())
  price     String?
  discount  String?
  orderId   String
  order     Order    @relation(fields: [orderId], references: [orderId])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ordered_products")
}

model Supplier {
  id        String    @id @default(uuid())
  name      String
  address   String
  contactNo String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("suppliers")
}

model Payment {
  id                 String        @id @default(uuid())
  amount             Int
  userEmail          String?
  status             PaymentStatus @default(PANDING)
  transactionId      String
  paymentGatewayData Json?
  createdAt          DateTime?     @default(now())
  updatedAt          DateTime?     @updatedAt

  @@map("payments")
}

enum PaymentStatus {
  PANDING
  PAID
}

enum UserRole {
  admin
  customer
}

enum Status {
  pending
  shipped
  delivered
}

enum OrderType {
  cashOnDelivery
  cash
}
